/* Method -2  */

/* Min insertions to make palindrome = n - Length of longest palindromic subsequence */

/* https://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome/description/ */

class Solution {
public:
     int longestPalindromeSubseq(string s) {
       
         int n=s.size(),m=s.size();
         vector<vector<int>>dp(n+1,vector<int>(m+1,-1));
        
        string s1=s;
     
       reverse(s1.begin(),s1.end());
       for(int j=0;j<m;j++){
           dp[0][j]=0;
       }
       for(int i=0;i<m;i++){
           dp[i][0]=0;
       }
       for(int i=1;i<=m;i++){
           for(int j=1;j<=m;j++){
               if(s[i-1]==s1[j-1]){
                    dp[i][j]=1+ dp[i-1][j-1];
                }
                else{
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
                }
           }
       }
        
        return dp[n][m];
    }
    int minInsertions(string s) {
        return s.length()-longestPalindromeSubseq(s);
    }
};
